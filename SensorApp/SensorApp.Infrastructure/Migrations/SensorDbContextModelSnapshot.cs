// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensorApp.Infrastructure.Data;

#nullable disable

namespace SensorApp.Infrastructure.Migrations
{
    [DbContext(typeof(SensorDbContext))]
    partial class SensorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3d52c1e5-6aec-45de-91c1-e0ebf20464e3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "71136dd8-0a29-4d9a-b3fe-bd176ba7aa9c",
                            Name = "Operations Manager",
                            NormalizedName = "OPERATIONS MANAGER"
                        },
                        new
                        {
                            Id = "9b7f193f-bfc4-4eb7-927f-55960e45a82a",
                            Name = "Environmental Scientist",
                            NormalizedName = "ENVIRONMENTAL SCIENTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab66dad-9f12-45a0-9fd8-6352336a696d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03964d3e-b96b-48ac-990d-0eec26b79ac0",
                            Email = "admin@sensor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SENSOR.COM",
                            NormalizedUserName = "ADMIN@SENSOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqITM2LyE+LGr6aE6tkreiahW67lNTocrWqcOLJmxTKh/ng/LcmlDLlOZhmCGiFwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "175fad37-b693-4118-9c2d-b47394a008c6",
                            TwoFactorEnabled = false,
                            UserName = "admin@sensor.com"
                        },
                        new
                        {
                            Id = "99166c0c-7f14-442b-8c57-9141f3ac1681",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6e86fcc-c3ba-4aaf-a8ab-0ffb37937812",
                            Email = "ops@sensor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS@SENSOR.COM",
                            NormalizedUserName = "OPS@SENSOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOSta0GGyGx8gNDV1RVTQ79jqjKBks21vfjKLdfTroFtuPOdFOXJGy3Jg1H/6JsMuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf5992c8-c69b-40aa-9f17-05d7a8a50379",
                            TwoFactorEnabled = false,
                            UserName = "ops@sensor.com"
                        },
                        new
                        {
                            Id = "1243c642-7fdf-4224-9404-02dd6ac95bc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c1ff2f9-a78e-45fc-bfd9-97523cfcf942",
                            Email = "scientist@sensor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SCIENTIST@SENSOR.COM",
                            NormalizedUserName = "SCIENTIST@SENSOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKeh1pnllPKvl+AviVhKO9RopOGjh27SfogsRudKXLtk8+FPb0kKBhD3j4ujgijucw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de46f987-f814-4f42-8706-3d9ad50cbc68",
                            TwoFactorEnabled = false,
                            UserName = "scientist@sensor.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fab66dad-9f12-45a0-9fd8-6352336a696d",
                            RoleId = "3d52c1e5-6aec-45de-91c1-e0ebf20464e3"
                        },
                        new
                        {
                            UserId = "99166c0c-7f14-442b-8c57-9141f3ac1681",
                            RoleId = "71136dd8-0a29-4d9a-b3fe-bd176ba7aa9c"
                        },
                        new
                        {
                            UserId = "1243c642-7fdf-4224-9404-02dd6ac95bc5",
                            RoleId = "9b7f193f-bfc4-4eb7-927f-55960e45a82a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SensorApp.Infrastructure.Domain.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeploymentDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("sensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeploymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 139.6917f,
                            Longitude = 35.6895f,
                            Type = "Temperature"
                        },
                        new
                        {
                            Id = 2,
                            DeploymentDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 40.7128f,
                            Longitude = -74.006f,
                            Type = "Humidity"
                        },
                        new
                        {
                            Id = 3,
                            DeploymentDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 48.8566f,
                            Longitude = 2.3522f,
                            Type = "Pressure"
                        },
                        new
                        {
                            Id = 4,
                            DeploymentDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 48.8566f,
                            Longitude = 2.3522f,
                            Type = "Pressure"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
